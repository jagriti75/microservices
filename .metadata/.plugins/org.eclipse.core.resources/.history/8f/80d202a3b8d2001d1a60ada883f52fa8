package validation.user.exception;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;

import validation.user.error.error;

@RestControllerAdvice
public class ExceptionHandler {

	LocalDateTime date = LocalDateTime.now();

	@org.springframework.web.bind.annotation.ExceptionHandler(UnauthorizedException.class)
	@ResponseStatus(HttpStatus.UNAUTHORIZED)
	@ResponseBody
	public ResponseEntity<?> handleInvalidAuthorization(UnauthorizedException ex, HttpServletRequest req) {

		HttpHeaders headers = new HttpHeaders();
		if (req.getHeader("CONTENT-TYPE").contains("application/json")) {
			if (req.getHeader("json").contains("true")) {
				headers.set("CONTENT-TYPE", "application/json");
			} else {
				headers.set("CONTENT-TYPE", "application/xml");
			}
		} else {
			if (req.getHeader("xml").contains("true")) {
				headers.set("CONTENT-TYPE", "application/xml");
			} else {
				headers.set("CONTENT-TYPE", "application/json");
			}
		}

		Map<String, String> maps = new HashMap<>();
		maps.put("invalidCredentials", ex.getMessage());
		error error = new error(401, date, maps);
		return ResponseEntity.status(HttpStatus.UNAUTHORIZED).headers(headers).body(error);

	}

	@org.springframework.web.bind.annotation.ExceptionHandler(HttpMessageNotReadableException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	@ResponseBody
	public ResponseEntity<?> handleInvalidArgument(Exception ex, HttpServletRequest req) {
		String message = null;
		Map<String, String> errors = new HashMap<>();
		HttpHeaders headers = new HttpHeaders();
		if (req.getHeader("CONTENT-TYPE").contains("application/json")) {
			if (req.getHeader("json").contains("true")) {
				headers.set("CONTENT-TYPE", "application/json");
			} else {
				headers.set("CONTENT-TYPE", "application/xml");
			}
		} else {
			if (req.getHeader("xml").contains("true")) {
				headers.set("CONTENT-TYPE", "application/xml");
			} else {
				headers.set("CONTENT-TYPE", "application/json");
			}
		}

		if (!(req.getHeader("id").contains("abc"))) {
			Map<String, String> maps = new HashMap<>();
			maps.put("invalidCredentials", "id entered is wrong ");
			// errorsClass.setError(maps);
			message = "id entered is wrong";
			error error = new error(401, date, maps);
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).headers(headers).body(error);
		} else if (req.getHeader("id") == null) {
			Map<String, String> maps = new HashMap<>();
			maps.put("invalidRequest", "id not found");
			error error = new error(500, date, maps);
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).headers(headers).body(error);
		} else {
			String error = ex.getMessage();
			if (error.contains("int")) {
				message = "Age must be a number";
				errors.put("invalidAge", message);

			}
			if (error.contains("Unexpected character ('}' (code 125)): expected a value;")) {
				message = "Age should not be empty";
				errors.put("invalidAge", message);

			}
			if (error.contains("Unexpected character (',' (code 44)): expected a value;")) {
				message = "Name should not be empty";
				errors.put("invalidName", message);

			}
			if (error.contains(
					"JSON parse error: Unexpected character (',' (code 44)): expected a value; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character (',' (code 44)): expected a value\n at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 2, column: 15]")) {
				message = "Name should not be empty";
				errors.put("invalidName", message);
			}
		}
		error error = new error(400, date, errors);
		return ResponseEntity.status(HttpStatus.BAD_REQUEST).headers(headers).body(error);
	}

	@org.springframework.web.bind.annotation.ExceptionHandler(MethodArgumentNotValidException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	@ResponseBody
	public ResponseEntity<?> handleInvalidArgument(Exception ex, HttpServletRequest req ,BindingResult result) {
		HttpHeaders headers = new HttpHeaders();
		if (req.getHeader("CONTENT-TYPE").contains("application/json")) {
			if (req.getHeader("json").contains("true")) {
				headers.set("CONTENT-TYPE", "application/json");
			} else {
				headers.set("CONTENT-TYPE", "application/xml");
			}
		} else {
			if (req.getHeader("xml").contains("true")) {
				headers.set("CONTENT-TYPE", "application/xml");
			} else {
				headers.set("CONTENT-TYPE", "application/json");
			}
		}

		Map<String, String> maps = new HashMap<>();
		List<FieldError> errors = result.getFieldErrors();
		for (FieldError error : errors) {
			maps.put("error" + error.getField().substring(0, 1).toUpperCase() + error.getField().substring(1),
					error.getDefaultMessage());

		}

		error error = new error(400, date, maps);

		return ResponseEntity.status(HttpStatus.BAD_REQUEST).headers(headers).body(error);
	}

}
