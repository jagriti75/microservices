package validation.user.controller;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import validation.user.data.UserRepository;
import validation.user.entity.UserEntity;
import validation.user.error.error;
import validation.user.exception.ApiRequestException;
import validation.user.exception.UnauthorizedException;



@RestController
public class UserController{
	Logger log = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	UserRepository repo;
	
	//@Autowired
	//Errors errorClass;
	
	
	LocalDateTime date =  LocalDateTime.now();
	
	@GetMapping(value="/{name}",consumes= {MediaType.APPLICATION_JSON_VALUE , MediaType.APPLICATION_XML_VALUE} ,
	produces = {MediaType.APPLICATION_JSON_VALUE , MediaType.APPLICATION_XML_VALUE})
	public ResponseEntity<?> getValue(HttpServletRequest req , @PathVariable("name") String name){
		UserEntity user = repo.findByName(name);
		if (user != null) {
	        return ResponseEntity.ok(user);
	    } else {
	        throw new ApiRequestException("Could not find requested user");
	    }
	}

	@PostMapping(value ="/register" , consumes= {MediaType.APPLICATION_JSON_VALUE , MediaType.APPLICATION_XML_VALUE} ,
	produces = {MediaType.APPLICATION_JSON_VALUE , MediaType.APPLICATION_XML_VALUE})
	public ResponseEntity<?> register(@RequestBody @Valid UserEntity user , BindingResult result ,HttpServletRequest req){	
		HttpHeaders headers = new HttpHeaders();				
		if(req.getHeader("CONTENT-TYPE").contains("application/json")) {
			if(req.getHeader("json").contains("true")) {
			headers.set("CONTENT-TYPE", "application/json");
			}
			else {
				headers.set("CONTENT-TYPE", "application/xml");
			}
		}else {
			if(req.getHeader("xml").contains("true")) {
			headers.set("CONTENT-TYPE","application/xml");
			}else {
				headers.set("CONTENT-TYPE","application/json");
			}
		}
	
		
		if(!(req.getHeader("id").contains("abc"))) {
			throw new UnauthorizedException("access is denied");
			
			
		}else{
			if(result.hasErrors()) {			
				Map<String,String> maps = new HashMap<>() ;
				List<FieldError> errors = result.getFieldErrors();
				for(FieldError error:errors) {					
					maps.put("error"+error.getField().substring(0,1).toUpperCase()+error.getField().substring(1), error.getDefaultMessage());
					
				}
	
				error error = new error(400 , date , maps);
				
				return  ResponseEntity.status(HttpStatus.BAD_REQUEST).headers(headers).body(error);
			}
			String name = user.getName();
			UserEntity user1 = repo.findByName(name);
			if(user1 != null) {
				throw new IllegalArgumentException();
			}
			
			
		}				
		repo.save(user);

			return ResponseEntity.status(HttpStatus.OK).headers(headers).body(user);		


	}
}

